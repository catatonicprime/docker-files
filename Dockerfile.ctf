# ---- Stage 1: Building CTF console
# --- Add software packages
FROM ubuntu:latest
RUN apt update && DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y && DEBIAN_FRONTEND=noninteractive apt install -y ascii bundler clang curl file fish gdb git graphviz iproute2 iputils-ping libpcap-dev libpq-dev bundler llvm locales ltrace nmap openssh-server proxychains python3 python3-pip python3-venv socat ssh strace supervisor tcpdump tshark ttyd vim wget

# --- Setup supervisord which will let us run both ttyd and sshd for exposing the service.
COPY ctf/supervisord.conf /etc/supervisor/conf.d/console.conf
EXPOSE 22 7681

# --- Stage directory structure
RUN groupmod -n ctf ubuntu && usermod -d /home/ctf -l ctf ubuntu -c CTF && mv /home/ubuntu /home/ctf
ARG TOOLS_DIR=/tools
RUN mkdir -p $TOOLS_DIR /root/.ssh /var/run/sshd /run/sshd && chmod 755 /var/run/sshd /run/sshd 

ARG PYTHON_VENV=python-active
# --- Python Virtual Envionrment
RUN bash -c "PY_VERSION=\$(python3 --version | cut -d ' ' -f 2) && cd $TOOLS_DIR && python3 -m venv \$PY_VERSION && ln -s \$PY_VERSION $TOOLS_DIR/$PYTHON_VENV"
RUN bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && pip install --upgrade pip && pip install scapy scikit-learn"

# --- pwntools
ARG PWNTOOLS_DIR=pwntools
RUN git clone https://github.com/Gallopsled/pwntools.git $TOOLS_DIR/$PWNTOOLS_DIR
RUN bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && cd $TOOLS_DIR/$PWNTOOLS_DIR && pip install ."

# --- angr & friends
ARG ANGR_DIR=angr
ARG ANGR_UTILS_DIR=angr-utils
#RUN git clone https://github.com/angr/angr.git $TOOLS_DIR/$ANGR_DIR && bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && cd $TOOLS_DIR/$ANGR_DIR && pip install ."
RUN git clone https://github.com/axt/angr-utils.git $TOOLS_DIR/$ANGR_UTILS_DIR && bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && cd $TOOLS_DIR/$ANGR_UTILS_DIR && pip install -r requirements.txt && pip install ."

# --- GEF
ARG GEF_DIR=gef
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
RUN git clone https://github.com/hugsy/gef.git $TOOLS_DIR/$GEF_DIR

# --- GEF-Extras
ARG GEF_EXTRAS_DIR=gef-extras
RUN git clone https://github.com/hugsy/gef-extras.git $TOOLS_DIR/$GEF_EXTRAS_DIR
RUN bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && pip install -r $TOOLS_DIR/$GEF_EXTRAS_DIR/requirements.txt"
COPY ctf/config_gef.sh /tmp/config_gef.sh
RUN chmod +rx /tmp/config_gef.sh && /tmp/config_gef.sh $TOOLS_DIR $GEF_EXTRAS_DIR $PYTHON_VENV
USER ctf
RUN /tmp/config_gef.sh $TOOLS_DIR $GEF_EXTRAS_DIR $PYTHON_VENV
USER root

# --- Remove build artifacts
RUN rm  -rf /tmp/*
RUN bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && pip cache purge"

# --- Configure user shells
RUN bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && \
    PY_PATH=\$(python -c 'import site; print([d for d in site.getsitepackages() if d.endswith(\"site-packages\")][0])') && \
    echo 'PYTHON PATH: ' \$PY_VERSION && \
    echo \"export PYTHONPATH=\$PY_PATH\" >> \$HOME/.bashrc"
RUN echo "source $TOOLS_DIR/$PYTHON_VENV/bin/activate" >> ~/.bashrc

USER ctf
RUN bash -c "source $TOOLS_DIR/$PYTHON_VENV/bin/activate && \
    PY_PATH=\$(python -c 'import site; print([d for d in site.getsitepackages() if d.endswith(\"site-packages\")][0])') && \
    echo \"export PYTHONPATH=\$PY_PATH\" >> \$HOME/.bashrc"
RUN echo "source $TOOLS_DIR/$PYTHON_VENV/bin/activate" >> ~/.bashrc

# --- Start Supervisord to begin the services
USER root
CMD ["/usr/bin/supervisord"]
